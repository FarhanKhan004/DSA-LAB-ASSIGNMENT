package circularlinkedlist;

public class CircularLinkedList
{
    Node head;
    Node tail;
    
    class Node
    {
        int data;
        Node next;

        Node(int d)
        {
            data = d;
            next = null;
        }       
    }
    
    public CircularLinkedList insertion (CircularLinkedList list, int data)
    {
        Node n = new Node(data);
        
        if (head == null) 
        {
            head = n;
            tail = n;
            n.next = head;
        }
        
        else    
        {
            tail.next = n;
            tail = n;
            tail.next = head;
        }                
        return list;
    }
                
    public CircularLinkedList InsertAtStart (CircularLinkedList list, int data)
    {
        Node n = new Node(data);
        
        n.next = head;
        head = n;      
        tail.next = head;
        
        return list;
    }
    
    public CircularLinkedList DeleteStart (CircularLinkedList list)
    {
        head = head.next;   
        tail.next = head;
        
        return list;
    }
    
    public int FindLength (CircularLinkedList list)
    {
        int count = 0;
        Node n = head;
        do 
        {
            n = n.next;
            count++;
        } 
        while (n != head);
        
        return count;
    }
    
    public CircularLinkedList DeleteEnd (CircularLinkedList list)
    {
        Node current = head, prev = null;
        for (int i = 0; i < FindLength(list) - 1; i++)
        {
            prev = current;
            current = current.next;
        }
        
        tail = prev;
        tail.next = head;
   
        return list;
    }
    
    public void sortList(CircularLinkedList list) 
    {  
        Node current = head, index = current;  
        int temp;  
        
        if(head == null)
        {  
            System.out.println("List is empty");  
        }  
        
        else
        {  
            do
            {  
                index = current.next;  
                while(index != head) 
                {  
                    if(current.data > index.data) 
                    {  
                        temp = current.data;  
                        current.data = index.data;  
                        index.data = temp;  
                    }  
                    index = index.next;
                }
                current = current.next;  
            }
            while(current.next != head);   
        }  
    }  
    
    public CircularLinkedList Update (CircularLinkedList list, int node, int value)
    {
        Node current = head;
        if (head == null)
        {
            System.out.println("List is Empty!");
        }
        else if (node > FindLength(list))
        {
            System.out.println("Invalid Node!");
        }
        else    
        {
            for (int i = 1; i < node; i++) 
            {
                current = current.next;
            }
            current.data = value;
            list.printList(list);
        }
        return list; 
    }
    
    public void Reverse (CircularLinkedList list)
    {
        Node current = head;
        Node prev = null;
        Node next = null;
        
        do
        {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        while (current != head);
        head.next = prev;
        tail = current;
        head = prev;
    }
    
    public void Frequency (CircularLinkedList list, int value)
    {
        int count = 0;
        Node temp = head;
        do
        {
            if (temp.data == value)
            {
                count++;
            }
            temp = temp.next;
        }
        while (temp != head);
        System.out.println("Total Value Frequency : " +count);
    }
    
    public CircularLinkedList Search (CircularLinkedList list, int key)
    {
        Node temp = head; 
        do
        {
            if (temp.data == key)
            {
                System.out.println("Record Found");
                return list;
            }
            
            if (temp.next == head)
            {
                System.out.println("Record Not Found");
            }
            temp = temp.next;
        }
        while (temp != head);
        return list;
    }
       
    public void printList (CircularLinkedList list)
    {      
        Node n1 = head;
        do
        {
            System.out.println(n1.data);
            n1 = n1.next;
        }
        while (n1 != head);
        System.out.println("----------------");
    }
    public static void main(String[] args) 
    {
        CircularLinkedList list = new CircularLinkedList();
        
        list = list.insertion(list, 1);
        list = list.insertion(list, 3);
        list = list.insertion(list, 5);
        list = list.insertion(list, 8);
        list = list.insertion(list, 2);
        list = list.insertion(list, 10);
                
        list.printList(list);
                
        list = list.InsertAtStart(list, 0);
        list.printList(list);
        
        list = list.DeleteStart (list);
        list.printList(list);
        
        System.out.println("Number of Nodes are: " + list.FindLength(list));
        
        list = list.DeleteEnd(list); 
        list.printList(list);
        
        System.out.println("Number of Nodes are: " + list.FindLength(list));
        
        list = list.Search(list, 3);
        
        list.sortList(list);
        list.printList(list);
        
        list.Update(list, 4, 10);
        
        list.Frequency(list, 1);
    }
}
